/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
bool doesOverlap(Interval a, Interval b) { 
    return (min(a.end, b.end) >= max(a.start, b.start)); 
}

vector<Interval> Solution::insert(vector<Interval> &Intervals, Interval newInterval) {

    int n = Intervals.size();
    vector<Interval> ans;
    
    if (n == 0){
        ans.push_back(newInterval);
        return ans;
    }
    
    if(newInterval.end < Intervals[0].start || newInterval.start > Intervals[n - 1].end){ 
        if(newInterval.end < Intervals[0].start) 
            ans.push_back(newInterval); 
        for (int i = 0; i < n; i++) 
            ans.push_back(Intervals[i]); 
        if (newInterval.start > Intervals[n - 1].end) 
            ans.push_back(newInterval);     
        return ans; 
    }
    
    if (newInterval.start <= Intervals[0].start && newInterval.end >= Intervals[n - 1].end){ 
        ans.push_back(newInterval); 
        return ans; 
    }
    
    bool overlap = true; 
    
    for(int i = 0; i < n; i++){ 
        overlap = doesOverlap(Intervals[i], newInterval); 
        if(!overlap){
            ans.push_back(Intervals[i]);
            // Case 4 : To check if given interval 
            // lies between two intervals. 
            if(i < n && 
                newInterval.start > Intervals[i].end && 
                newInterval.end < Intervals[i + 1].start)
            {
                ans.push_back(newInterval);
            }
            continue;
        }
        
        // Case 5 : Merge Overlapping Intervals. 
        // Starting time of new merged interval is 
        // minimum of starting time of both 
        // overlapping intervals. 
        
        Interval temp; 
        temp.start = min(newInterval.start, Intervals[i].start);
        
        // Traverse the set until intervals are 
        // overlapping 
        
        while (i < n && overlap){ 
            // Ending time of new merged interval 
            // is maximum of ending time both 
            // overlapping intervals. 
            temp.end = max(newInterval.end, Intervals[i].end); 
            if (i == n - 1) 
                overlap = false; 
            else
                overlap = doesOverlap(Intervals[i + 1], newInterval); 
            i++; 
        }
        
        i--; 
        ans.push_back(temp); 
    }
    return ans;
}
